# The following code for a lovelace card requires installation of the Plotly Graph Card from HACS in Home Assistant.
# To use this card, add a manual lovelace card and paste the follow code and replace the variable values with 
# your sensor names
#
# To configure, adjust the name vars below to match the sensor and number entity names in Home Assistant.
# eg.
#   If your sensor name is 'sensor.ld2450-radar_target_1_x'
#   Use vars.sensorName = "ld2450-radar"
#
#   If your number entity name is 'number.ld2450-radar_zone_1_x1'
#   Use vars.numberEntityName = "ld2450-radar"

type: custom:plotly-graph
fn:
  - $ex vars.espName = "ESP32-1"
  - $ex vars.sensorName = "ld2450-radar"
  - $ex vars.numberEntityName = "ld2450-radar"
  - $ex vars.zone1Name = "Zone 1"
  - $ex vars.zone2Name = "Zone 2"
  - $ex vars.zone3Name = "Zone 3"
title: $ex vars.espName + " Target Positions"
refresh_interval: 1
hours_to_show: current_day
layout:
  height: 230
  margin:
    l: 50
    r: 20
    t: 20
    b: 40
  showlegend: true
  xaxis:
    dtick: 1000
    gridcolor: RGBA(200,200,200,0.15)
    zerolinecolor: RGBA(200,200,200,0.15)
    type: number
    fixedrange: true
    range:
      - 5000
      - -5000
  yaxis:
    dtick: 1000
    gridcolor: RGBA(200,200,200,0.15)
    zerolinecolor: RGBA(200,200,200,0.15)
    scaleanchor: x
    scaleratio: 1
    fixedrange: true
    range:
      - 7500
      - 0
entities:
  - entity: ""
    name: Target1
    marker:
      size: 12
    line:
      shape: spline
      width: 5
    x:
      - >-
        $ex { var x = hass.states["sensor." + vars.sensorName +
        "_target_1_x"].state; var y = hass.states["sensor." + vars.sensorName +
        "_target_1_y"].state; if (x == 0 && y == 0) { return -9999 }; return x; }
    "y":
      - >-
        $ex { var x = hass.states["sensor." + vars.sensorName +
        "_target_1_x"].state; var y = hass.states["sensor." + vars.sensorName +
        "_target_1_y"].state; if (x == 0 && y == 0) { return -9999 }; return y; }
  - entity: ""
    name: Target2
    marker:
      size: 12
    line:
      shape: spline
      width: 5
    x:
      - >-
        $ex { var x = hass.states["sensor." + vars.sensorName +
        "_target_2_x"].state; var y = hass.states["sensor." + vars.sensorName +
        "_target_2_y"].state; if (x == 0 && y == 0) { return -9999 }; return x; }
    "y":
      - >-
        $ex { var x = hass.states["sensor." + vars.sensorName +
        "_target_2_x"].state; var y = hass.states["sensor." + vars.sensorName +
        "_target_2_y"].state; if (x == 0 && y == 0) { return -9999 }; return y; }
  - entity: ""
    name: Target3
    marker:
      size: 12
    line:
      shape: spline
      width: 5
    x:
      - >-
        $ex { var x = hass.states["sensor." + vars.sensorName +
        "_target_3_x"].state; var y = hass.states["sensor." + vars.sensorName +
        "_target_3_y"].state; if (x == 0 && y == 0) { return -9999 }; return x; }
    "y":
      - >-
        $ex { var x = hass.states["sensor." + vars.sensorName +
        "_target_3_x"].state; var y = hass.states["sensor." + vars.sensorName +
        "_target_3_y"].state; if (x == 0 && y == 0) { return -9999 }; return y; }
  - entity: ""
    name: $ex vars.zone1Name
    mode: lines
    fill: toself
    fillcolor: RGBA(20,200,0,0.06)
    line:
      color: RGBA(20,200,0,0.2)
      shape: line
      width: 2
    x:
      - >-
        $ex hass.states["number." + vars.numberEntityName +
        "_zone_1_x1"].state
      - >-
        $ex hass.states["number." + vars.numberEntityName +
        "_zone_1_x1"].state
      - $ex hass.states["number." + vars.numberEntityName + "_zone_1_x2"].state
      - $ex hass.states["number." + vars.numberEntityName + "_zone_1_x2"].state
      - >-
        $ex hass.states["number." + vars.numberEntityName +
        "_zone_1_x1"].state
    "y":
      - >-
        $ex hass.states["number." + vars.numberEntityName +
        "_zone_1_y1"].state
      - $ex hass.states["number." + vars.numberEntityName + "_zone_1_y2"].state
      - $ex hass.states["number." + vars.numberEntityName + "_zone_1_y2"].state
      - >-
        $ex hass.states["number." + vars.numberEntityName +
        "_zone_1_y1"].state
      - >-
        $ex hass.states["number." + vars.numberEntityName +
        "_zone_1_y1"].state
  - entity: ""
    name: $ex vars.zone2Name
    mode: lines
    fill: toself
    fillcolor: RGBA(200,0,255,0.06)
    line:
      color: RGBA(200,0,255,0.2)
      shape: line
      width: 2
    x:
      - >-
        $ex hass.states["number." + vars.numberEntityName +
        "_zone_2_x1"].state
      - >-
        $ex hass.states["number." + vars.numberEntityName +
        "_zone_2_x1"].state
      - $ex hass.states["number." + vars.numberEntityName + "_zone_2_x2"].state
      - $ex hass.states["number." + vars.numberEntityName + "_zone_2_x2"].state
      - >-
        $ex hass.states["number." + vars.numberEntityName +
        "_zone_2_x1"].state
    "y":
      - >-
        $ex hass.states["number." + vars.numberEntityName +
        "_zone_2_y1"].state
      - $ex hass.states["number." + vars.numberEntityName + "_zone_2_y2"].state
      - $ex hass.states["number." + vars.numberEntityName + "_zone_2_y2"].state
      - >-
        $ex hass.states["number." + vars.numberEntityName +
        "_zone_2_y1"].state
      - >-
        $ex hass.states["number." + vars.numberEntityName +
        "_zone_2_y1"].state
  - entity: ""
    name: $ex vars.zone3Name
    mode: lines
    fill: toself
    fillcolor: RGBA(200,120,55,0.06)
    line:
      color: RGBA(200,120,55,0.2)
      shape: line
      width: 2
    x:
      - >-
        $ex hass.states["number." + vars.numberEntityName +
        "_zone_3_x1"].state
      - >-
        $ex hass.states["number." + vars.numberEntityName +
        "_zone_3_x1"].state
      - $ex hass.states["number." + vars.numberEntityName + "_zone_3_x2"].state
      - $ex hass.states["number." + vars.numberEntityName + "_zone_3_x2"].state
      - >-
        $ex hass.states["number." + vars.numberEntityName +
        "_zone_3_x1"].state
    "y":
      - >-
        $ex hass.states["number." + vars.numberEntityName +
        "_zone_3_y1"].state
      - $ex hass.states["number." + vars.numberEntityName + "_zone_3_y2"].state
      - $ex hass.states["number." + vars.numberEntityName + "_zone_3_y2"].state
      - >-
        $ex hass.states["number." + vars.numberEntityName +
        "_zone_3_y1"].state
      - >-
        $ex hass.states["number." + vars.numberEntityName +
        "_zone_3_y1"].state
  - entity: ""
    name: Coverage
    mode: lines
    fill: tonexty
    fillcolor: rgba(168, 216, 234, 0.07)
    line:
      shape: line
      width: 1
      dash: dot
    x:
      - 0
      - $ex 7500 * Math.sin((2 * Math.PI)/360 * 60)
      - 4500
      - 4000
      - 3000
      - 2000
      - 1000
      - 0
      - -1000
      - -2000
      - -3000
      - -4000
      - -4500
      - $ex -7500 * Math.sin((2 * Math.PI)/360 * 60)
      - 0
    "y":
      - 0
      - $ex 7500 * Math.cos((2 * Math.PI)/360 * 60)
      - $ex Math.sqrt( 7500**2 - 4500**2 )
      - $ex Math.sqrt( 7500**2 - 4000**2 )
      - $ex Math.sqrt( 7500**2 - 3000**2 )
      - $ex Math.sqrt( 7500**2 - 2000**2 )
      - $ex Math.sqrt( 7500**2 - 1000**2 )
      - 7500
      - $ex Math.sqrt( 7500**2 - 1000**2 )
      - $ex Math.sqrt( 7500**2 - 2000**2 )
      - $ex Math.sqrt( 7500**2 - 3000**2 )
      - $ex Math.sqrt( 7500**2 - 4000**2 )
      - $ex Math.sqrt( 7500**2 - 4500**2 )
      - $ex 7500 * Math.cos((2 * Math.PI)/360 * 60)
      - 0
raw_plotly_config: true
